第一种方法：BeginEnvoke EndEnvoke方法，属于“等待”类。
namespace 异步调用实现方法汇总
{
    /// 
    /// 异步调用方法总结：
    /// 1.BeginEnvoke EndEnvoke
    /// 当使用BeginInvoke异步调用方法时，如果方法未执行完，EndInvoke方法就会一直阻塞，直到被调用的方法执行完毕
    /// 
    class Program
    {
        public delegate void PrintDelegate(string s);
        static void Main(string[] args)
        {
            PrintDelegate printDelegate = Print;
            Console.WriteLine("主线程");

            IAsyncResult result= printDelegate.BeginInvoke("Hello World.", null, null);
            Console.WriteLine("主线程继续执行...");
            //当使用BeginInvoke异步调用方法时，如果方法未执行完，EndInvoke方法就会一直阻塞，直到被调用的方法执行完毕
            printDelegate.EndInvoke(result);

            Console.WriteLine("Press any key to continue...");
            Console.ReadKey(true);
        }

        public static void Print(string s)
        {
            Console.WriteLine("异步线程开始执行："+s);
            Thread.Sleep(5000);
        }
    }
}

第二种方法：WaitOne。同样属于“等待”类。

namespace 异步调用实现方法汇总2
{
    /// 
    /// 异步调用方法总结：
    /// 2.WaitOne
    /// 可以看到，与EndInvoke类似，只是用WaitOne函数代码了EndInvoke而已。
    /// 
    class Program
    {
        public delegate void PrintDelegate(string s);
        static void Main(string[] args)
        {
            PrintDelegate printDelegate = Print;
            Console.WriteLine("主线程");
            IAsyncResult result = printDelegate.BeginInvoke("Hello World.", null, null);
            Console.WriteLine("主线程继续执行...");
            result.AsyncWaitHandle.WaitOne(-1, false);

            Console.WriteLine("Press any key to continue...");
            Console.ReadKey(true);
        }
        public static void Print(string s)
        {
            Console.WriteLine("异步线程开始执行：" + s);
            Thread.Sleep(5000);
        }
    }
}

第三种方法：轮询。也是属于“等待”类
namespace 异步调用实现方法汇总3
{
    /// 
    /// 异步调用方法总结：
    /// 3.轮询
    /// 之前提到的两种方法，只能等下异步方法执行完毕，
    /// 在完毕之前没有任何提示信息，整个程序就像没有响应一样，用户体验不好，
    /// 可以通过检查IasyncResult类型的IsCompleted属性来检查异步调用是否完成，
    /// 如果没有完成，则可以适时地显示一些提示信息
    /// 
    class Program
    {
        public delegate void PrintDelegate(string s);
        static void Main(string[] args)
        {
            PrintDelegate printDelegate = Print;
            Console.WriteLine("主线程:"+Thread.CurrentThread.ManagedThreadId );
            IAsyncResult result = printDelegate.BeginInvoke("Hello world.", null, null);
            Console.WriteLine("主线程:" + Thread.CurrentThread.ManagedThreadId + ",继续执行...");
            while (!result.IsCompleted)
            {
                Console.WriteLine(".");
                Thread.Sleep(500);
            }

            Console.WriteLine("主线程:" + Thread.CurrentThread.ManagedThreadId + "  Press any key to continue...");
            Console.ReadKey(true);
        }
        public static void Print(string s)
        {
            Console.WriteLine("当前线程：" + Thread.CurrentThread.ManagedThreadId + s);
            Thread.Sleep(5000);
        }
    }
}

第四种方法：回调。当然属于“回调”类。推荐！！！！

namespace 异步调用实现方法汇总4
{
    /// 
    /// 异步调用方法总结：
    /// 4.回调
    /// 之前三种方法者在等待异步方法执行完毕后才能拿到执行的结果，期间主线程均处于等待状态。
    /// 回调和它们最大的区别是，在调用BeginInvoke时只要提供了回调方法，那么主线程就不必要再等待异步线程工作完毕，
    /// 异步线程在工作结束后会主动调用我们提供的回调方法，并在回调方法中做相应的处理，例如显示异步调用的结果。
    /// 
    class Program
    {
        public delegate void PrintDelegate(string s);
        static void Main(string[] args)
        {
            PrintDelegate printDelegate = Print;
            Console.WriteLine("主线程.");
            printDelegate.BeginInvoke("Hello world.", PrintComeplete, printDelegate);
            Console.WriteLine("主线程继续执行...");

            Console.WriteLine("Press any key to continue...");
            Console.ReadKey(true);
        }
        public static void Print(string s)
        { 
            Console.WriteLine("当前线程："+s);
            Thread.Sleep(5000);
        }
        //回调方法要求
        //1.返回类型为void
        //2.只有一个参数IAsyncResult
        public static void PrintComeplete(IAsyncResult result)
        {
            (result.AsyncState as PrintDelegate).EndInvoke(result);
            Console.WriteLine("当前线程结束." + result.AsyncState.ToString());
        }
    }
}
